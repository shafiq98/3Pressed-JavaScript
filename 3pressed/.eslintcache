[{"C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed ReactJS\\3pressed\\src\\index.js":"1","C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed ReactJS\\3pressed\\src\\GlobalElements\\navArray.js":"2","C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed ReactJS\\3pressed\\src\\GlobalElements\\Navigation.js":"3","C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed ReactJS\\3pressed\\src\\GlobalElements\\companyHeader.js":"4","C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed ReactJS\\3pressed\\src\\fixedInformationArray\\tutorArray.js":"5","C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed ReactJS\\3pressed\\src\\fixedInformationArray\\listingArray.js":"6","C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed ReactJS\\3pressed\\src\\fixedInformationArray\\subjectArray.js":"7","C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed ReactJS\\3pressed\\src\\Templates\\Element.js":"8","C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed ReactJS\\3pressed\\src\\Templates\\Particulars.js":"9","C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed ReactJS\\3pressed\\src\\Templates\\SingleListing.js":"10","C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed ReactJS\\3pressed\\src\\fixedInformationArray\\contactArray.js":"11","C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed ReactJS\\3pressed\\src\\GlobalElements\\footer.js":"12","C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed ReactJS\\3pressed\\src\\GlobalElements\\ChoiceContext.js":"13","C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed ReactJS\\3pressed\\src\\Templates\\Profile.js":"14","C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed ReactJS\\3pressed\\src\\fixedInformationArray\\userArray.js":"15"},{"size":2913,"mtime":1609729612651,"results":"16","hashOfConfig":"17"},{"size":468,"mtime":1609386245822,"results":"18","hashOfConfig":"17"},{"size":2805,"mtime":1609729606554,"results":"19","hashOfConfig":"17"},{"size":204,"mtime":1609386245822,"results":"20","hashOfConfig":"17"},{"size":475,"mtime":1609386245824,"results":"21","hashOfConfig":"17"},{"size":643,"mtime":1609386245824,"results":"22","hashOfConfig":"17"},{"size":342,"mtime":1609386245824,"results":"23","hashOfConfig":"17"},{"size":1404,"mtime":1609386245823,"results":"24","hashOfConfig":"17"},{"size":1766,"mtime":1609729144484,"results":"25","hashOfConfig":"17"},{"size":2392,"mtime":1609386245823,"results":"26","hashOfConfig":"17"},{"size":625,"mtime":1609220895133,"results":"27","hashOfConfig":"17"},{"size":190,"mtime":1609386245822,"results":"28","hashOfConfig":"17"},{"size":121,"mtime":1609386245821,"results":"29","hashOfConfig":"17"},{"size":1474,"mtime":1609729606554,"results":"30","hashOfConfig":"17"},{"size":291,"mtime":1609729606554,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1a69thu",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"39"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed ReactJS\\3pressed\\src\\index.js",["66","67"],"C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed ReactJS\\3pressed\\src\\GlobalElements\\navArray.js",[],"C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed ReactJS\\3pressed\\src\\GlobalElements\\Navigation.js",["68","69"],"import React from 'react'\r\nimport {navigationArray} from './navArray';\r\nimport {useState} from 'react';\r\nimport navIcon from '..//Images//navigation.png';\r\n\r\n// JS for navigationMenu element\r\n\r\n\r\nlet userChoice = \"Nothing\";\r\n// when an option in the navMenu is chosen, we record that choice using clickHandler\r\nconst NavElement = (props) => {\r\n    const {title} = props;\r\n    const clickHandler = () => {\r\n        userChoice = title;\r\n        console.log(`userChoice = ${userChoice}`);\r\n    }\r\n\r\n    // this return statement defines how each individual grid looks like\r\n    // modify this to add icons, etc in the future\r\n    return (\r\n        <article id = \"navElement\" className = \"navElement\" onClick= {clickHandler}>\r\n            <span><h4>{title}</h4></span>\r\n        </article>\r\n    )\r\n}\r\n\r\nexport const NavMenu = (props) => {\r\n\r\n\r\n    // this useState and handler handles the opening and closing of navMenu\r\n    const [isOpen, setIsOpen] = useState(true);\r\n    const clickHandler = () => {\r\n        if (isOpen){\r\n            document.getElementById(\"navigationMenu\").style.width = \"200px\";\r\n            document.getElementById(\"overlay\").style.display = \"block\";\r\n        }\r\n        else{\r\n            document.getElementById(\"navigationMenu\").style.width = \"0px\";\r\n            document.getElementById(\"overlay\").style.display = \"none\";\r\n        }\r\n        setIsOpen(!isOpen);\r\n    }\r\n\r\n    // since the navMenu will be hidden once the menu opens up, the user will very likely be unable to click that again\r\n    // so we dont have to worry about what happens if user clicks navMenu twice in succession\r\n    return (\r\n        <section className=\"navigation\">\r\n            {/* clicking on navButton triggers first change in state */}\r\n            <section id = 'navButton' className= 'navButton' onClick = {clickHandler}>\r\n                <img src={navIcon} alt=\"\"/>\r\n            </section>\r\n\r\n            {/* clicking on overlay triggers second change in state */}\r\n            <section id = \"overlay\" className=\"overlay\" onClick = {clickHandler}>\r\n\r\n            </section>\r\n\r\n            <section id = 'navigationMenu' className=\"navigationMenu\">\r\n                {navigationArray.map((element) => {\r\n                    return <NavElement\r\n                    // key is the unique id for an element inside the array, need this to avoid error inside console\r\n                    key = {element.id}\r\n                    // the spread operator below returns everything inside element, \r\n                    // so we dont have to name every possible item that can exist inside element\r\n                    {...element}>\r\n                    </NavElement>\r\n                })}\r\n            </section>\r\n        </section>\r\n    )\r\n}\r\n\r\n",["70","71"],"C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed ReactJS\\3pressed\\src\\GlobalElements\\companyHeader.js",[],"C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed ReactJS\\3pressed\\src\\fixedInformationArray\\tutorArray.js",[],"C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed ReactJS\\3pressed\\src\\fixedInformationArray\\listingArray.js",[],"C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed ReactJS\\3pressed\\src\\fixedInformationArray\\subjectArray.js",[],"C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed ReactJS\\3pressed\\src\\Templates\\Element.js",["72","73","74","75","76"],"C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed ReactJS\\3pressed\\src\\Templates\\Particulars.js",["77","78","79"],"C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed ReactJS\\3pressed\\src\\Templates\\SingleListing.js",["80","81","82"],"C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed ReactJS\\3pressed\\src\\fixedInformationArray\\contactArray.js",[],["83","84"],"C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed ReactJS\\3pressed\\src\\GlobalElements\\footer.js",[],"C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed ReactJS\\3pressed\\src\\GlobalElements\\ChoiceContext.js",["85"],"C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed ReactJS\\3pressed\\src\\Templates\\Profile.js",["86","87"],"import React from 'react'\r\nimport {useState, useContext} from 'react';\r\n\r\n// this template will be used to display the user's information when they click on profile in the nav menu\r\nconst PersonalInfo = (props) => {\r\n    const {username, age, email, avatar, address} = props;\r\n\r\n    const clickHandler = () => {\r\n        console.log(`Username : ${username}`);\r\n    }\r\n\r\n    return (\r\n        <article id = \"SingleListing\" className=\"SingleListing\" onClick = {clickHandler}>\r\n            <div className=\"information\">\r\n                <img src={avatar} alt=\"\"/>\r\n                <h1>{username}</h1>\r\n                <p>Email : {email}</p>\r\n                <p>Age : {age}</p>\r\n                <p>Address : {address}</p>\r\n            </div>\r\n        </article>\r\n    )\r\n}\r\n\r\nexport const InfoListing = (props) => {\r\n    const {informationArray, ToDisplay} = props;\r\n    return (\r\n        <section id = 'Listing' className=\"Listing\">\r\n            {(ToDisplay === 4) && informationArray.map((element) => {\r\n                return <PersonalInfo\r\n                // key is the unique id for an element inside the array, need this to avoid error inside console\r\n                key = {element.id}\r\n                // the spread operator below returns everything inside element, \r\n                // so we dont have to name every possible item that can exist inside element\r\n                {...element}>\r\n                </PersonalInfo>\r\n            })}\r\n        </section>\r\n    )\r\n}","C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed ReactJS\\3pressed\\src\\fixedInformationArray\\userArray.js",[],{"ruleId":"88","severity":1,"message":"89","line":3,"column":30,"nodeType":"90","messageId":"91","endLine":3,"endColumn":40},{"ruleId":"92","severity":1,"message":"93","line":44,"column":3,"nodeType":"90","endLine":44,"endColumn":12,"suggestions":"94"},{"ruleId":"88","severity":1,"message":"95","line":10,"column":5,"nodeType":"90","messageId":"91","endLine":10,"endColumn":15},{"ruleId":"88","severity":1,"message":"96","line":14,"column":12,"nodeType":"90","messageId":"91","endLine":14,"endColumn":18},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"88","severity":1,"message":"101","line":3,"column":9,"nodeType":"90","messageId":"91","endLine":3,"endColumn":21},{"ruleId":"88","severity":1,"message":"102","line":4,"column":9,"nodeType":"90","messageId":"91","endLine":4,"endColumn":21},{"ruleId":"88","severity":1,"message":"103","line":6,"column":9,"nodeType":"90","messageId":"91","endLine":6,"endColumn":17},{"ruleId":"88","severity":1,"message":"95","line":11,"column":5,"nodeType":"90","messageId":"91","endLine":11,"endColumn":15},{"ruleId":"88","severity":1,"message":"96","line":17,"column":10,"nodeType":"90","messageId":"91","endLine":17,"endColumn":16},{"ruleId":"88","severity":1,"message":"103","line":2,"column":9,"nodeType":"90","messageId":"91","endLine":2,"endColumn":17},{"ruleId":"88","severity":1,"message":"95","line":7,"column":5,"nodeType":"90","messageId":"91","endLine":7,"endColumn":15},{"ruleId":"88","severity":1,"message":"96","line":10,"column":12,"nodeType":"90","messageId":"91","endLine":10,"endColumn":18},{"ruleId":"88","severity":1,"message":"103","line":2,"column":9,"nodeType":"90","messageId":"91","endLine":2,"endColumn":17},{"ruleId":"88","severity":1,"message":"104","line":2,"column":19,"nodeType":"90","messageId":"91","endLine":2,"endColumn":28},{"ruleId":"88","severity":1,"message":"96","line":8,"column":12,"nodeType":"90","messageId":"91","endLine":8,"endColumn":18},{"ruleId":"97","replacedBy":"105"},{"ruleId":"99","replacedBy":"106"},{"ruleId":"88","severity":1,"message":"89","line":2,"column":9,"nodeType":"90","messageId":"91","endLine":2,"endColumn":19},{"ruleId":"88","severity":1,"message":"103","line":2,"column":9,"nodeType":"90","messageId":"91","endLine":2,"endColumn":17},{"ruleId":"88","severity":1,"message":"89","line":2,"column":19,"nodeType":"90","messageId":"91","endLine":2,"endColumn":29},"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setWorkingArray'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [choice] as a second argument to the useEffect Hook.",["107"],"'userChoice' is assigned a value but never used.","'choice' is assigned a value but never used.","no-native-reassign",["108"],"no-negated-in-lhs",["109"],"'listingArray' is defined but never used.","'subjectArray' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.",["108"],["109"],{"desc":"110","fix":"111"},"no-global-assign","no-unsafe-negation","Add dependencies array: [choice]",{"range":"112","text":"113"},[2134,2134],", [choice]"]