[{"C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed-JavaScript\\3pressed\\src\\index.js":"1","C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed-JavaScript\\3pressed\\src\\GlobalElements\\ChoiceContext.js":"2","C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed-JavaScript\\3pressed\\src\\GlobalElements\\Navigation.js":"3","C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed-JavaScript\\3pressed\\src\\GlobalElements\\companyHeader.js":"4","C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed-JavaScript\\3pressed\\src\\GlobalElements\\footer.js":"5","C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed-JavaScript\\3pressed\\src\\Templates\\Profile.js":"6","C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed-JavaScript\\3pressed\\src\\Templates\\Element.js":"7","C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed-JavaScript\\3pressed\\src\\fixedInformationArray\\listingArray.js":"8","C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed-JavaScript\\3pressed\\src\\Templates\\SingleListing.js":"9","C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed-JavaScript\\3pressed\\src\\fixedInformationArray\\tutorArray.js":"10","C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed-JavaScript\\3pressed\\src\\Templates\\Particulars.js":"11","C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed-JavaScript\\3pressed\\src\\fixedInformationArray\\userArray.js":"12","C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed-JavaScript\\3pressed\\src\\fixedInformationArray\\subjectArray.js":"13","C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed-JavaScript\\3pressed\\src\\GlobalElements\\navArray.js":"14"},{"size":3457,"mtime":1609740668413,"results":"15","hashOfConfig":"16"},{"size":86,"mtime":1609732401726,"results":"17","hashOfConfig":"16"},{"size":2942,"mtime":1609739795423,"results":"18","hashOfConfig":"16"},{"size":204,"mtime":1609730444691,"results":"19","hashOfConfig":"16"},{"size":190,"mtime":1609730444691,"results":"20","hashOfConfig":"16"},{"size":1482,"mtime":1609739118127,"results":"21","hashOfConfig":"16"},{"size":1211,"mtime":1609740760874,"results":"22","hashOfConfig":"16"},{"size":643,"mtime":1609730444702,"results":"23","hashOfConfig":"16"},{"size":2371,"mtime":1609739172316,"results":"24","hashOfConfig":"16"},{"size":475,"mtime":1609730444702,"results":"25","hashOfConfig":"16"},{"size":1730,"mtime":1609732370734,"results":"26","hashOfConfig":"16"},{"size":291,"mtime":1609732415905,"results":"27","hashOfConfig":"16"},{"size":342,"mtime":1609730444702,"results":"28","hashOfConfig":"16"},{"size":468,"mtime":1609730444691,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1bas0st",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed-JavaScript\\3pressed\\src\\index.js",[],["63","64"],"C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed-JavaScript\\3pressed\\src\\GlobalElements\\ChoiceContext.js",[],"C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed-JavaScript\\3pressed\\src\\GlobalElements\\Navigation.js",["65","66"],"import React from 'react'\r\nimport {navigationArray} from './navArray';\r\nimport {useState, useContext} from 'react';\r\nimport navIcon from '..//Images//navigation.png';\r\nimport { ChoiceContext } from './ChoiceContext';\r\n\r\nconst openNav = () => {\r\n    document.getElementById(\"navigationMenu\").style.width = \"200px\";\r\n    document.getElementById(\"overlay\").style.display = \"block\";\r\n}\r\n\r\nconst closeNav = () => {\r\n    document.getElementById(\"navigationMenu\").style.width = \"0px\";\r\n    document.getElementById(\"overlay\").style.display = \"none\";\r\n}\r\n\r\n// when an option in the navMenu is chosen, we record that choice using clickHandler\r\nconst NavElement = (props) => {\r\n    const {title} = props;\r\n    const {choice, setChoice} = useContext(ChoiceContext);\r\n    const clickHandler = () => {\r\n        setChoice(title);\r\n        closeNav();\r\n    }\r\n\r\n    // this return statement defines how each individual grid looks like\r\n    // modify this to add icons, etc in the future\r\n    return (\r\n        <article id = \"navElement\" className = \"navElement\" onClick= {clickHandler}>\r\n            <span><h4>{title}</h4></span>\r\n        </article>\r\n    )\r\n}\r\n\r\nexport const NavMenu = (props) => {\r\n\r\n    const {informationArray} = props;\r\n    let username = informationArray[0].username;\r\n    // bring in open and close nav functions from index.js\r\n    // better than declaring inline since we need to use closeNav in multiple places onClick\r\n\r\n    // since the navMenu will be hidden once the menu opens up, the user will very likely be unable to click that again\r\n    // so we dont have to worry about what happens if user clicks navMenu twice in succession\r\n    return (\r\n        <section className=\"navigation\">\r\n            {/* clicking on navButton triggers first change in state */}\r\n            <section id = 'navButton' className= 'navButton' onClick = {openNav}>\r\n                <img src={navIcon} alt=\"\"/>\r\n            </section>\r\n\r\n            {/* clicking on overlay triggers second change in state */}\r\n            <section id = \"overlay\" className=\"overlay\" onClick = {closeNav}>\r\n\r\n            </section>\r\n\r\n            <section id = 'navigationMenu' className=\"navigationMenu\">\r\n                <section className=\"welcomeMessage\">\r\n                    <p>Welcome</p>\r\n                    <h2>{username}</h2>\r\n                </section>\r\n                \r\n                {navigationArray.map((element) => {\r\n                    return <NavElement\r\n                    // key is the unique id for an element inside the array, need this to avoid error inside console\r\n                    key = {element.id}\r\n                    // the spread operator below returns everything inside element, \r\n                    // so we dont have to name every possible item that can exist inside element\r\n                    {...element}>\r\n                    </NavElement>\r\n                })}\r\n            </section>\r\n        </section>\r\n    )\r\n}\r\n\r\n","C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed-JavaScript\\3pressed\\src\\GlobalElements\\companyHeader.js",[],"C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed-JavaScript\\3pressed\\src\\GlobalElements\\footer.js",[],"C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed-JavaScript\\3pressed\\src\\Templates\\Profile.js",[],"C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed-JavaScript\\3pressed\\src\\Templates\\Element.js",["67"],"import React from 'react';\r\n\r\nimport {useContext} from 'react';\r\n\r\nimport {ChoiceContext} from '..//GlobalElements/ChoiceContext';\r\n\r\n// this template is used to display a grid information like categories\r\n\r\n// when an option in the grid is chosen, we record that choice\r\n// using our clickHandler\r\nconst Element = (props) => {\r\n  const {title} = props;\r\n  const {choice, setChoice} = useContext(ChoiceContext);\r\n  const clickHandler = () => {\r\n    setChoice(title);\r\n  }\r\n  \r\n  // this return statement defines how each individual grid looks like\r\n  // modify this to add icons, etc in the future\r\n  return (\r\n      <article id = \"element\" className = \"element\" onClick = {() => clickHandler(title)}>\r\n        <h1>{title}</h1>\r\n      </article>\r\n  )\r\n}\r\n\r\nconst ElementList = (props) => {\r\n  \r\n  const {displayArray, ToDisplay} = props;\r\n  // const {displayArray, setDisplayArray} = useContext(ChoiceContext);\r\n\r\n  return (\r\n    <section id = 'ElementList' className = 'ElementList'>\r\n      {(ToDisplay===1) && displayArray.map((element) => {\r\n        return <Element \r\n        key = {element.id}\r\n        {...element}>\r\n        </Element>\r\n      })}\r\n    </section>\r\n  )\r\n  \r\n}\r\n\r\nexport default ElementList\r\n","C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed-JavaScript\\3pressed\\src\\fixedInformationArray\\listingArray.js",[],"C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed-JavaScript\\3pressed\\src\\Templates\\SingleListing.js",["68"],"import React from 'react'\r\nimport {useContext} from 'react';\r\nimport {ChoiceContext} from '..//GlobalElements/ChoiceContext';\r\n\r\n\r\nconst SingleListing = (props) => {\r\n    const {title, age, sex, distance, rate, avatar} = props;\r\n    const {choice, setChoice} = useContext(ChoiceContext);\r\n    const clickHandler = () => {\r\n        setChoice('default');\r\n    }\r\n    return (\r\n        <article id = \"SingleListing\" className = \"SingleListing\" onClick = {clickHandler}>\r\n            <div className=\"information\">\r\n                <img src={avatar} alt=\"\"/>\r\n                <h2>{title}</h2>\r\n                <p>Age : {age}</p>\r\n                <p>Sex : {sex}</p>\r\n                <p>Distance : {distance}km</p>\r\n                <p>Rate : ${rate}/hr</p>\r\n            </div>\r\n\r\n            <div className=\"contact\">\r\n                <img src=\"https://www.flaticon.com/svg/static/icons/svg/1384/1384023.svg\" alt=\"\"/>\r\n                <img src=\"https://www.flaticon.com/svg/static/icons/svg/725/725643.svg\" alt=\"\"/>\r\n                <img src=\"https://www.flaticon.com/svg/static/icons/svg/151/151804.svg\" alt=\"\"/>\r\n                <img src=\"https://www.flaticon.com/svg/static/icons/svg/151/151876.svg\" alt=\"\"/>\r\n                <img src=\"https://www.flaticon.com/svg/static/icons/svg/151/151949.svg\" alt=\"\"/>\r\n            </div>\r\n\r\n            <input type=\"submit\" value = \"Apply Now\"/>\r\n            \r\n        </article>\r\n    )\r\n}\r\n\r\nexport const DisplayListing = (props) => {\r\n    // create an array of just one element so i can reuse return statement from other Templates\r\n    const {personArray, index, ToDisplay} = props;\r\n    const person = [personArray[index]]\r\n    \r\n    // different classname and id for different css styling purposes\r\n    return (\r\n        <section id = \"Listing\" className=\"Listing\" >\r\n            {(ToDisplay === 3) && person.map((element) => {\r\n                return <SingleListing\r\n                // key is the unique id for an element inside the array, need this to avoid error inside console\r\n                key = {element.id}\r\n                // the spread operator below returns everything inside element, \r\n                // so we dont have to name every possible item that can exist inside element\r\n                {...element}>\r\n                </SingleListing>\r\n            }\r\n            \r\n            )}\r\n        </section>\r\n    )\r\n}","C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed-JavaScript\\3pressed\\src\\fixedInformationArray\\tutorArray.js",[],"C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed-JavaScript\\3pressed\\src\\Templates\\Particulars.js",["69"],"import React from 'react'\r\nimport {useContext} from 'react';\r\nimport {ChoiceContext} from '..//GlobalElements/ChoiceContext';\r\n\r\n\r\n// this template will be used for listing of individual people, with more detail like a list of tutors\r\nconst Particulars = (props) => {\r\n    const {title, age, sex, distance, rate, avatar} = props;\r\n    const {choice, setChoice} = useContext(ChoiceContext);\r\n    const clickHandler = () => {\r\n        setChoice(title);\r\n    }\r\n    return (\r\n        <article id = \"element\" className = \"element\" onClick = {clickHandler}>\r\n            <div className=\"information\">\r\n                <span><h1>{title}</h1></span>\r\n                <h4>Age : {age}</h4>\r\n                <h4>Sex : {sex}</h4>\r\n                <h4>Distance : {distance}km</h4>\r\n                <h4>Rate : ${rate}/hr</h4>\r\n            </div>\r\n            <div className=\"image-container\">\r\n                <img src={avatar} alt=\"\"/>\r\n            </div>         \r\n            \r\n        </article>\r\n    )\r\n}\r\n\r\nexport const ParticularsListing = (props) => {\r\n    const {particularsArray, ToDisplay} = props;\r\n    return (\r\n        <section id = 'particularsListing' className=\"particularsListing\">\r\n            {(ToDisplay === 2) && particularsArray.map((element) => {\r\n                return <Particulars\r\n                // key is the unique id for an element inside the array, need this to avoid error inside console\r\n                key = {element.id}\r\n                // the spread operator below returns everything inside element, \r\n                // so we dont have to name every possible item that can exist inside element\r\n                {...element}>\r\n                </Particulars>\r\n            })}\r\n        </section>\r\n    )\r\n}","C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed-JavaScript\\3pressed\\src\\fixedInformationArray\\userArray.js",[],"C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed-JavaScript\\3pressed\\src\\fixedInformationArray\\subjectArray.js",[],"C:\\Users\\pcadmin\\Documents\\GitHub\\3Pressed-JavaScript\\3pressed\\src\\GlobalElements\\navArray.js",[],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":3,"column":9,"nodeType":"76","messageId":"77","endLine":3,"endColumn":17},{"ruleId":"74","severity":1,"message":"78","line":20,"column":12,"nodeType":"76","messageId":"77","endLine":20,"endColumn":18},{"ruleId":"74","severity":1,"message":"78","line":13,"column":10,"nodeType":"76","messageId":"77","endLine":13,"endColumn":16},{"ruleId":"74","severity":1,"message":"78","line":8,"column":12,"nodeType":"76","messageId":"77","endLine":8,"endColumn":18},{"ruleId":"74","severity":1,"message":"78","line":9,"column":12,"nodeType":"76","messageId":"77","endLine":9,"endColumn":18},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'choice' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]